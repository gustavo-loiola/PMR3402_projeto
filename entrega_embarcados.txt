#include <Ultrasonic.h>

/* Sensor ultrassônico */
#define pino_trigger  52
#define pino_echo     53
Ultrasonic ultrasonic(pino_trigger, pino_echo);

/* Motores DC */
#define MotorA1       4
#define MotorA2       5
#define MotorB1       6
#define MotorB2       7

#define VELOCIDADE 127  // 50% da velocidade máxima

enum Estado { PARADO, PARAFRENTE, DIREITA, ESQUERDA };
Estado estadoAtual;

void setup() {
  pinMode(MotorA1, OUTPUT);
  pinMode(MotorA2, OUTPUT);
  pinMode(MotorB1, OUTPUT);
  pinMode(MotorB2, OUTPUT);
  Serial.begin(9600);
  estadoAtual = PARADO;
}

void ParaFrente() {
  analogWrite(MotorA1, VELOCIDADE);
  analogWrite(MotorA2, 0);
  analogWrite(MotorB1, 0);
  analogWrite(MotorB2, VELOCIDADE);
}

void Parado() {
  analogWrite(MotorA1, 0);
  analogWrite(MotorA2, 0);
  analogWrite(MotorB1, 0);
  analogWrite(MotorB2, 0);
}

void Direita() {
  analogWrite(MotorA1, VELOCIDADE);
  analogWrite(MotorA2, 0);
  analogWrite(MotorB1, VELOCIDADE);
  analogWrite(MotorB2, 0);
}

void Esquerda() {
  analogWrite(MotorA1, 0);
  analogWrite(MotorA2, VELOCIDADE);
  analogWrite(MotorB1, 0);
  analogWrite(MotorB2, VELOCIDADE);
}

void loop() {
  float cmMsec;
  long microsec = ultrasonic.timing();
  cmMsec = ultrasonic.convert(microsec, Ultrasonic::CM);
  Serial.print("Distancia em cm: ");
  Serial.print(cmMsec);
  Serial.println();
  delay(10);

  switch (estadoAtual) {
    case PARADO:
      if (cmMsec >= 15) {
        estadoAtual = PARAFRENTE;
        ParaFrente();
      }
      break;

    case PARAFRENTE:
      if (cmMsec < 15) {
        estadoAtual = (random(2) == 0) ? DIREITA : ESQUERDA;
        if (estadoAtual == DIREITA) {
          Direita();
        } else {
          Esquerda();
        }
        delay(500);  // Espera para o carrinho virar um pouco
      }
      break;

    case DIREITA:
    case ESQUERDA:
      if (cmMsec >= 15) {
        estadoAtual = PARAFRENTE;
        ParaFrente();
      } else {
        microsec = ultrasonic.timing();
        cmMsec = ultrasonic.convert(microsec, Ultrasonic::CM);
        Serial.print("Distancia em cm: ");
        Serial.print(cmMsec);
        Serial.println();
        delay(10);
      }
      break;
  }
}
